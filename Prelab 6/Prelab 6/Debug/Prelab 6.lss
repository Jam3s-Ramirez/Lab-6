
Prelab 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800100  0000058a  0000061e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008001ea  008001ea  00000708  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b08  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000739  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059d  00000000  00000000  00001a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c7  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000277a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_18>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_21>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	9a 01       	movw	r18, r20
  6a:	9f 01       	movw	r18, r30
  6c:	a4 01       	movw	r20, r8
  6e:	a9 01       	movw	r20, r18
  70:	ae 01       	movw	r20, r28
  72:	b3 01       	movw	r22, r6
  74:	b8 01       	movw	r22, r16
  76:	bd 01       	movw	r22, r26
  78:	c2 01       	movw	r24, r4
  7a:	c7 01       	movw	r24, r14
  7c:	d3 01       	movw	r26, r6
  7e:	d8 01       	movw	r26, r16
  80:	dd 01       	movw	r26, r26
  82:	e2 01       	movw	r28, r4
  84:	e7 01       	movw	r28, r14
  86:	ec 01       	movw	r28, r24
  88:	f1 01       	movw	r30, r2
  8a:	f6 01       	movw	r30, r12
  8c:	fb 01       	movw	r30, r22
  8e:	00 02       	muls	r16, r16
  90:	0c 02       	muls	r16, r28
  92:	11 02       	muls	r17, r17
  94:	16 02       	muls	r17, r22
  96:	1b 02       	muls	r17, r27
  98:	20 02       	muls	r18, r16
  9a:	25 02       	muls	r18, r21
  9c:	2a 02       	muls	r18, r26
  9e:	2f 02       	muls	r18, r31
  a0:	34 02       	muls	r19, r20
  a2:	39 02       	muls	r19, r25

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ea e8       	ldi	r30, 0x8A	; 138
  b8:	f5 e0       	ldi	r31, 0x05	; 5
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	aa 3e       	cpi	r26, 0xEA	; 234
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	aa ee       	ldi	r26, 0xEA	; 234
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a2 3f       	cpi	r26, 0xF2	; 242
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  da:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <initUART9600>:

}

void initUART9600(void){
	
	cli ();
  e2:	f8 94       	cli
	//PORTB COMO SALIDAS
	DDRB = 0xFF;   // Todo como salidas
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  e8:	15 b8       	out	0x05, r1	; 5
	
	//PASO 1: RX SE TOMA COMO ENTRADA Y TX COMO SALIDA
	DDRD &= ~(1<<DDD0);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	8a b9       	out	0x0a, r24	; 10
	
	//PASO 2: CONFIGURACION DEL UCSR0A
	UCSR0A = 0;
  f6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//PASO 3: CONFIGURACION DEL UCSR0B, SE HABILITA ISR DE RECEPCION Y SE HABILITAN RX Y TX
	UCSR0B = 0;
  fa:	e1 ec       	ldi	r30, 0xC1	; 193
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 100:	80 81       	ld	r24, Z
 102:	88 69       	ori	r24, 0x98	; 152
 104:	80 83       	st	Z, r24
	
	//PASO 4: CONFIGURACION DE UCSR0C COMO ASINCRONO, SIN PARIDAD, 1 BIT DE STOP, 8 BITS DE DATA
	UCSR0C = 0;
 106:	e2 ec       	ldi	r30, 0xC2	; 194
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 10c:	80 81       	ld	r24, Z
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	80 83       	st	Z, r24
	
	//PASO 5: CONFIGURAR VELOCIDAD DE BAUDRATE: 9600
	UBRR0 = 103;
 112:	87 e6       	ldi	r24, 0x67	; 103
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 11a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 11e:	08 95       	ret

00000120 <initADC>:
}


void initADC(void){
	ADMUX = 6;
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 83       	st	Z, r24
	//REFERENCIA AVCC = 5V
	ADMUX |= (1<<REFS0);
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 12e:	80 81       	ld	r24, Z
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	80 83       	st	Z, r24
	
	//JUSTIFICACION A LA IZQUIERDA
	ADMUX |= (1<<ADLAR);
 134:	80 81       	ld	r24, Z
 136:	80 62       	ori	r24, 0x20	; 32
 138:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	10 82       	st	Z, r1
	
	//HABILITA INTERRUPCION
	ADCSRA	|= (1<<ADIE);
 140:	80 81       	ld	r24, Z
 142:	88 60       	ori	r24, 0x08	; 8
 144:	80 83       	st	Z, r24
	
	//HABILITA PREESCALER A 128 - 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 146:	80 81       	ld	r24, Z
 148:	87 60       	ori	r24, 0x07	; 7
 14a:	80 83       	st	Z, r24
	
	//HABILITA EL ADC
	ADCSRA |= (1<<ADEN);
 14c:	80 81       	ld	r24, Z
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <__vector_21>:
}


ISR(ADC_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	dato = ADCH;   //SE CARGA EL VALOR DEL ADC
 166:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <dato+0x1>
 170:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <dato>
	ADCSRA |= (1<<ADIF); //SE RESETEA LA BANDERA DE LA INTERRUPCIÓN
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	80 83       	st	Z, r24
	
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <writeUART>:

void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  
 190:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 194:	95 ff       	sbrs	r25, 5
 196:	fc cf       	rjmp	.-8      	; 0x190 <writeUART>
	UDR0 = Caracter;
 198:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 19c:	08 95       	ret

0000019e <writeTextUART>:
		
}


void writeTextUART(char * Texto){
 19e:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i = 0; Texto[i]!= '\0'; i++){
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 1a4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <writeTextUART+0x6>
			UDR0 = Texto[i];
 1ac:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}


void writeTextUART(char * Texto){
	uint8_t i;
	for(i = 0; Texto[i]!= '\0'; i++){
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	fa 01       	movw	r30, r20
 1b4:	e2 0f       	add	r30, r18
 1b6:	f1 1d       	adc	r31, r1
 1b8:	30 81       	ld	r19, Z
 1ba:	31 11       	cpse	r19, r1
 1bc:	f3 cf       	rjmp	.-26     	; 0x1a4 <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
			UDR0 = Texto[i];
	}
}
 1be:	08 95       	ret

000001c0 <main>:

char lista[10] = {'0','1','2','3','4','5','6','7','8','9'};
int main(void)
{
	//SE UTILIZA EL PORTB Y PORTD PARA LA CONEXIÓN DE LOS LEDS
	DDRB = 0b00111111;  
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11000000;  
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	80 6c       	ori	r24, 0xC0	; 192
 1c8:	8a b9       	out	0x0a, r24	; 10
		
	initADC();
 1ca:	0e 94 90 00 	call	0x120	; 0x120 <initADC>
	initUART9600();
 1ce:	0e 94 71 00 	call	0xe2	; 0xe2 <initUART9600>
	sei();
 1d2:	78 94       	sei
		
	while (1)
	{
		
	ADCSRA |= (1 << ADSC);   //INICIA LA LECTURA DEL ADC
 1d4:	ea e7       	ldi	r30, 0x7A	; 122
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	80 83       	st	Z, r24
		
	//	MENÚ PRINCIPAL
	if(potenciometro == 0){
 1de:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <potenciometro>
 1e2:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <potenciometro+0x1>
 1e6:	89 2b       	or	r24, r25
 1e8:	71 f5       	brne	.+92     	; 0x246 <main+0x86>
	writeTextUART("\n\rBienvenido a mi poslab :)\n\r");
 1ea:	8a e0       	ldi	r24, 0x0A	; 10
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
	writeUART(10);
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
 1f4:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	writeUART(13);
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	writeTextUART("Selecciona una de las dos opciones a continuación:\n\r");
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
	writeUART(10);
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	writeUART(13);
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	writeTextUART("1. Leer potenciometro\n\r");
 212:	8d e5       	ldi	r24, 0x5D	; 93
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
	writeUART(10);
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	writeUART(13);
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	writeTextUART("2. Enviar ASCII\n\r");  
 226:	85 e7       	ldi	r24, 0x75	; 117
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
	writeUART(10);
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	writeUART(13);
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
	potenciometro = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <potenciometro+0x1>
 242:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <potenciometro>
	}
	
	if(receivedChar != 0){
 246:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
 24a:	88 23       	and	r24, r24
 24c:	19 f2       	breq	.-122    	; 0x1d4 <main+0x14>
		switch(receivedChar)   //ESTE SWITCH CASE MUESTRA EL VALOR DEL POTENCIÓMETRO O ENVIAR UN ASCII DEPENDIENDO DE LA OPCIÓN SELECCIONADA
 24e:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
 252:	81 33       	cpi	r24, 0x31	; 49
 254:	21 f0       	breq	.+8      	; 0x25e <main+0x9e>
 256:	82 33       	cpi	r24, 0x32	; 50
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x9c>
 25a:	1a c1       	rjmp	.+564    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 25c:	bb cf       	rjmp	.-138    	; 0x1d4 <main+0x14>
		{
			case '1':
				writeTextUART("\n\r------------------------------------------\n\r");
 25e:	87 e8       	ldi	r24, 0x87	; 135
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
				writeTextUART("EL VALOR DEL POTENCIÓMETRO ES:");
 266:	86 eb       	ldi	r24, 0xB6	; 182
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
				
				// SEGMENTACIÓN DE LOS BITS PARA MOSTRAR LOS VALORES A TRAVÉS DE LOS LEDS
				uint8_t ValueLow = dato & 0b00111111; 
 26e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <dato>
 272:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <dato+0x1>
 276:	28 2f       	mov	r18, r24
 278:	2f 73       	andi	r18, 0x3F	; 63
				uint8_t ValueHigh = (dato >> 6) & 0b11;
 27a:	08 2e       	mov	r0, r24
 27c:	89 2f       	mov	r24, r25
 27e:	00 0c       	add	r0, r0
 280:	88 1f       	adc	r24, r24
 282:	99 0b       	sbc	r25, r25
 284:	00 0c       	add	r0, r0
 286:	88 1f       	adc	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	83 70       	andi	r24, 0x03	; 3

				PORTB = ValueLow;
 28c:	25 b9       	out	0x05, r18	; 5

				PORTD = (PORTD & ~0b11000000) | (ValueHigh << 6);
 28e:	2b b1       	in	r18, 0x0b	; 11
 290:	30 e4       	ldi	r19, 0x40	; 64
 292:	83 9f       	mul	r24, r19
 294:	c0 01       	movw	r24, r0
 296:	11 24       	eor	r1, r1
 298:	92 2f       	mov	r25, r18
 29a:	9f 73       	andi	r25, 0x3F	; 63
 29c:	89 2b       	or	r24, r25
 29e:	8b b9       	out	0x0b, r24	; 11
				
				// SEGMETACIÓN DEL VALOR DEL POTENCIÓMETRO PARA CONVERTIRLO Y MOSTRARLO EN DECIMALES A TRAVÉS DE LA INTERFAZ
				int millares = dato/1000;
 2a0:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <dato>
 2a4:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <dato+0x1>
 2a8:	08 ee       	ldi	r16, 0xE8	; 232
 2aa:	13 e0       	ldi	r17, 0x03	; 3
 2ac:	c9 01       	movw	r24, r18
 2ae:	b8 01       	movw	r22, r16
 2b0:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodhi4>
 2b4:	7b 01       	movw	r14, r22
				int centenas = (dato-(millares*1000))/100;
 2b6:	48 e1       	ldi	r20, 0x18	; 24
 2b8:	5c ef       	ldi	r21, 0xFC	; 252
 2ba:	64 9f       	mul	r22, r20
 2bc:	c0 01       	movw	r24, r0
 2be:	65 9f       	mul	r22, r21
 2c0:	90 0d       	add	r25, r0
 2c2:	74 9f       	mul	r23, r20
 2c4:	90 0d       	add	r25, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	82 0f       	add	r24, r18
 2ca:	93 1f       	adc	r25, r19
 2cc:	64 e6       	ldi	r22, 0x64	; 100
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodhi4>
 2d4:	fb 01       	movw	r30, r22
				int decenas = (dato- (millares*1000 + centenas*100))/10;
 2d6:	e0 9e       	mul	r14, r16
 2d8:	e0 01       	movw	r28, r0
 2da:	e1 9e       	mul	r14, r17
 2dc:	d0 0d       	add	r29, r0
 2de:	f0 9e       	mul	r15, r16
 2e0:	d0 0d       	add	r29, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	44 e6       	ldi	r20, 0x64	; 100
 2e6:	46 9f       	mul	r20, r22
 2e8:	c0 01       	movw	r24, r0
 2ea:	47 9f       	mul	r20, r23
 2ec:	90 0d       	add	r25, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	c8 0f       	add	r28, r24
 2f2:	d9 1f       	adc	r29, r25
 2f4:	c9 01       	movw	r24, r18
 2f6:	8c 1b       	sub	r24, r28
 2f8:	9d 0b       	sbc	r25, r29
 2fa:	6a e0       	ldi	r22, 0x0A	; 10
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	0e 94 95 02 	call	0x52a	; 0x52a <__divmodhi4>
 302:	8b 01       	movw	r16, r22
				int unidades = dato-(millares*1000 + centenas*100 + decenas*10 );
 304:	cb 01       	movw	r24, r22
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	ab 01       	movw	r20, r22
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	44 0f       	add	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	84 0f       	add	r24, r20
 31a:	95 1f       	adc	r25, r21
 31c:	8c 0f       	add	r24, r28
 31e:	9d 1f       	adc	r25, r29
 320:	e9 01       	movw	r28, r18
 322:	c8 1b       	sub	r28, r24
 324:	d9 0b       	sbc	r29, r25
				
				switch(centenas){ 
 326:	ea 30       	cpi	r30, 0x0A	; 10
 328:	f1 05       	cpc	r31, r1
 32a:	a8 f5       	brcc	.+106    	; 0x396 <main+0x1d6>
 32c:	ec 5c       	subi	r30, 0xCC	; 204
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	0c 94 a9 02 	jmp	0x552	; 0x552 <__tablejump2__>
					case 0:
						writeUART(lista[0]);
 334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 338:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 33c:	2c c0       	rjmp	.+88     	; 0x396 <main+0x1d6>
					case 1:
						writeUART(lista[1]);
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 342:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 346:	27 c0       	rjmp	.+78     	; 0x396 <main+0x1d6>
					case 2:
						writeUART(lista[2]);
 348:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 34c:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 350:	22 c0       	rjmp	.+68     	; 0x396 <main+0x1d6>
					case 3:
						writeUART(lista[3]);
 352:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 356:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 35a:	1d c0       	rjmp	.+58     	; 0x396 <main+0x1d6>
					case 4:
						writeUART(lista[4]);
 35c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 360:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 364:	18 c0       	rjmp	.+48     	; 0x396 <main+0x1d6>
					case 5:
						writeUART(lista[5]);
 366:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 36a:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 36e:	13 c0       	rjmp	.+38     	; 0x396 <main+0x1d6>
					case 6:
						writeUART(lista[6]);
 370:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 374:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 378:	0e c0       	rjmp	.+28     	; 0x396 <main+0x1d6>
					case 7:
						writeUART(lista[7]);
 37a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 37e:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 382:	09 c0       	rjmp	.+18     	; 0x396 <main+0x1d6>
					case 8:
						writeUART(lista[8]);
 384:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 388:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
 38c:	04 c0       	rjmp	.+8      	; 0x396 <main+0x1d6>
					case 9:
						writeUART(lista[9]);
 38e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 392:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
						break;
				}
				
				switch(decenas){
 396:	0a 30       	cpi	r16, 0x0A	; 10
 398:	11 05       	cpc	r17, r1
 39a:	b0 f5       	brcc	.+108    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 39c:	f8 01       	movw	r30, r16
 39e:	e2 5c       	subi	r30, 0xC2	; 194
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	0c 94 a9 02 	jmp	0x552	; 0x552 <__tablejump2__>
					case 0:
					writeUART(lista[0]);
 3a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3aa:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3ae:	2c c0       	rjmp	.+88     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 1:
					writeUART(lista[1]);
 3b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3b4:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3b8:	27 c0       	rjmp	.+78     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 2:
					writeUART(lista[2]);
 3ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3be:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3c2:	22 c0       	rjmp	.+68     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 3:
					writeUART(lista[3]);
 3c4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3c8:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3cc:	1d c0       	rjmp	.+58     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 4:
					writeUART(lista[4]);
 3ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 3d2:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3d6:	18 c0       	rjmp	.+48     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 5:
					writeUART(lista[5]);
 3d8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 3dc:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3e0:	13 c0       	rjmp	.+38     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 6:
					writeUART(lista[6]);
 3e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 3e6:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 7:
					writeUART(lista[7]);
 3ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 3f0:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 8:
					writeUART(lista[8]);
 3f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 3fa:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					case 9:
					writeUART(lista[9]);
 400:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 404:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
				}
				
				switch(unidades){ 
 408:	ca 30       	cpi	r28, 0x0A	; 10
 40a:	d1 05       	cpc	r29, r1
 40c:	b0 f5       	brcc	.+108    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 40e:	fe 01       	movw	r30, r28
 410:	e8 5b       	subi	r30, 0xB8	; 184
 412:	ff 4f       	sbci	r31, 0xFF	; 255
 414:	0c 94 a9 02 	jmp	0x552	; 0x552 <__tablejump2__>
					case 0:
					writeUART(lista[0]);
 418:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41c:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 420:	2c c0       	rjmp	.+88     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 1:
					writeUART(lista[1]);
 422:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 426:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 42a:	27 c0       	rjmp	.+78     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 2:
					writeUART(lista[2]);
 42c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 430:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 434:	22 c0       	rjmp	.+68     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 3:
					writeUART(lista[3]);
 436:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 43a:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 43e:	1d c0       	rjmp	.+58     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 4:
					writeUART(lista[4]);
 440:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 444:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 448:	18 c0       	rjmp	.+48     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 5:
					writeUART(lista[5]);
 44a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 44e:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 452:	13 c0       	rjmp	.+38     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 6:
					writeUART(lista[6]);
 454:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 458:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;		
 45c:	0e c0       	rjmp	.+28     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 7:
					writeUART(lista[7]);
 45e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 462:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 466:	09 c0       	rjmp	.+18     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 8:
					writeUART(lista[8]);
 468:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 46c:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
 470:	04 c0       	rjmp	.+8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
					case 9:
					writeUART(lista[9]);
 472:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 476:	0e 94 c8 00 	call	0x190	; 0x190 <writeUART>
					break;
				}
				
				potenciometro = 0;   //COLOCA VALOR 0 PARA ENTRAR DE NUEVO EN EL IF Y MOSTRAR EL MENÚ PRINCIPAL
 47a:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <potenciometro+0x1>
 47e:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <potenciometro>
				receivedChar  = 0;   //SALE DEL IF 
 482:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end>
				writeTextUART("\n\r------------------------------------------\n\r");
 486:	87 e8       	ldi	r24, 0x87	; 135
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
			break;
 48e:	a2 ce       	rjmp	.-700    	; 0x1d4 <main+0x14>
			
			case '2':
				receivedChar = 0;	//COLOCAR EL VALOR DE ASCII
 490:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end>
				writeTextUART("\n\rIngrese un valor\n\r");
 494:	85 ed       	ldi	r24, 0xD5	; 213
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 cf 00 	call	0x19e	; 0x19e <writeTextUART>
				ascii = 1;		
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <ascii+0x1>
 4a4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <ascii>
				break;
 4a8:	95 ce       	rjmp	.-726    	; 0x1d4 <main+0x14>

000004aa <__vector_18>:
			UDR0 = Texto[i];
	}
}

ISR(USART_RX_vect)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
	receivedChar = UDR0; 
 4bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4c0:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__data_end>
	
	if (ascii == 1){    //ESCRIBIR ASCII
 4c4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <ascii>
 4c8:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <ascii+0x1>
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	e1 f4       	brne	.+56     	; 0x508 <__vector_18+0x5e>
		// SEGMENTACIÓN DE LOS BITS PARA MOSTRAR LOS VALORES A TRAVÉS DE LOS LEDS
		uint8_t ValueLow = receivedChar & 0b00111111; 
 4d0:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <__data_end>
 4d4:	2f 73       	andi	r18, 0x3F	; 63
		uint8_t ValueHigh = (receivedChar >> 6) & 0b11;
 4d6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
 4da:	98 2f       	mov	r25, r24
 4dc:	92 95       	swap	r25
 4de:	96 95       	lsr	r25
 4e0:	96 95       	lsr	r25
 4e2:	93 70       	andi	r25, 0x03	; 3

		PORTB = ValueLow;
 4e4:	25 b9       	out	0x05, r18	; 5

		PORTD = (PORTD & ~0b11000000) | (ValueHigh << 6);
 4e6:	2b b1       	in	r18, 0x0b	; 11
 4e8:	30 e4       	ldi	r19, 0x40	; 64
 4ea:	93 9f       	mul	r25, r19
 4ec:	c0 01       	movw	r24, r0
 4ee:	11 24       	eor	r1, r1
 4f0:	92 2f       	mov	r25, r18
 4f2:	9f 73       	andi	r25, 0x3F	; 63
 4f4:	89 2b       	or	r24, r25
 4f6:	8b b9       	out	0x0b, r24	; 11
		ascii = 0;  
 4f8:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <ascii+0x1>
 4fc:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <ascii>
		potenciometro = 0; 
 500:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <potenciometro+0x1>
 504:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <potenciometro>
	}
	
	while(!(UCSR0A & (1<<UDRE0)));
 508:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 50c:	85 ff       	sbrs	r24, 5
 50e:	fc cf       	rjmp	.-8      	; 0x508 <__vector_18+0x5e>
		UDR0 = receivedChar;
 510:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
 514:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <__divmodhi4>:
 52a:	97 fb       	bst	r25, 7
 52c:	07 2e       	mov	r0, r23
 52e:	16 f4       	brtc	.+4      	; 0x534 <__divmodhi4+0xa>
 530:	00 94       	com	r0
 532:	07 d0       	rcall	.+14     	; 0x542 <__divmodhi4_neg1>
 534:	77 fd       	sbrc	r23, 7
 536:	09 d0       	rcall	.+18     	; 0x54a <__divmodhi4_neg2>
 538:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 53c:	07 fc       	sbrc	r0, 7
 53e:	05 d0       	rcall	.+10     	; 0x54a <__divmodhi4_neg2>
 540:	3e f4       	brtc	.+14     	; 0x550 <__divmodhi4_exit>

00000542 <__divmodhi4_neg1>:
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__divmodhi4_neg2>:
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255

00000550 <__divmodhi4_exit>:
 550:	08 95       	ret

00000552 <__tablejump2__>:
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	05 90       	lpm	r0, Z+
 558:	f4 91       	lpm	r31, Z
 55a:	e0 2d       	mov	r30, r0
 55c:	09 94       	ijmp

0000055e <__udivmodhi4>:
 55e:	aa 1b       	sub	r26, r26
 560:	bb 1b       	sub	r27, r27
 562:	51 e1       	ldi	r21, 0x11	; 17
 564:	07 c0       	rjmp	.+14     	; 0x574 <__udivmodhi4_ep>

00000566 <__udivmodhi4_loop>:
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	a6 17       	cp	r26, r22
 56c:	b7 07       	cpc	r27, r23
 56e:	10 f0       	brcs	.+4      	; 0x574 <__udivmodhi4_ep>
 570:	a6 1b       	sub	r26, r22
 572:	b7 0b       	sbc	r27, r23

00000574 <__udivmodhi4_ep>:
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	5a 95       	dec	r21
 57a:	a9 f7       	brne	.-22     	; 0x566 <__udivmodhi4_loop>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
